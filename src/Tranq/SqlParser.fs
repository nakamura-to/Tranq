// Implementation file for parser generated by fsyacc
module internal Tranq.SqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 13 "SqlParser.fsy"

open Tranq.SqlAst
open Tranq.SqlAst.ParseHelper

# 11 "SqlParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | AT of (string)
  | LITERAL of (string)
  | EMBEDDED_VAR_COMMENT of (string)
  | BIND_VAR_COMMENT of (string)
  | FOR_COMMENT of (string)
  | END_COMMENT of (string)
  | ELSE_COMMENT of (string)
  | ELIF_COMMENT of (string)
  | IF_COMMENT of (string)
  | LINE_COMMENT of (string)
  | BLOCK_COMMENT of (string)
  | OTHER of (string)
  | WORD of (string)
  | OR of (string)
  | AND of (string)
  | FOR_UPDATE of (string)
  | ORDER_BY of (string)
  | GROUP_BY of (string)
  | HAVING of (string)
  | WHERE of (string)
  | FROM of (string)
  | SELECT of (string)
  | SET of (string)
  | NEWLINE of (string)
  | WHITESPACES of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_AT
    | TOKEN_LITERAL
    | TOKEN_EMBEDDED_VAR_COMMENT
    | TOKEN_BIND_VAR_COMMENT
    | TOKEN_FOR_COMMENT
    | TOKEN_END_COMMENT
    | TOKEN_ELSE_COMMENT
    | TOKEN_ELIF_COMMENT
    | TOKEN_IF_COMMENT
    | TOKEN_LINE_COMMENT
    | TOKEN_BLOCK_COMMENT
    | TOKEN_OTHER
    | TOKEN_WORD
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_FOR_UPDATE
    | TOKEN_ORDER_BY
    | TOKEN_GROUP_BY
    | TOKEN_HAVING
    | TOKEN_WHERE
    | TOKEN_FROM
    | TOKEN_SELECT
    | TOKEN_SET
    | TOKEN_NEWLINE
    | TOKEN_WHITESPACES
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Statement
    | NONTERM_NodeList
    | NONTERM_NodeListOpt
    | NONTERM_Node
    | NONTERM_IfComment
    | NONTERM_ElifCommentList
    | NONTERM_ElifCommentListOpt
    | NONTERM_ElifComment
    | NONTERM_ElseCommentOpt
    | NONTERM_ElseComment
    | NONTERM_ForComment

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | AT _ -> 3 
  | LITERAL _ -> 4 
  | EMBEDDED_VAR_COMMENT _ -> 5 
  | BIND_VAR_COMMENT _ -> 6 
  | FOR_COMMENT _ -> 7 
  | END_COMMENT _ -> 8 
  | ELSE_COMMENT _ -> 9 
  | ELIF_COMMENT _ -> 10 
  | IF_COMMENT _ -> 11 
  | LINE_COMMENT _ -> 12 
  | BLOCK_COMMENT _ -> 13 
  | OTHER _ -> 14 
  | WORD _ -> 15 
  | OR _ -> 16 
  | AND _ -> 17 
  | FOR_UPDATE _ -> 18 
  | ORDER_BY _ -> 19 
  | GROUP_BY _ -> 20 
  | HAVING _ -> 21 
  | WHERE _ -> 22 
  | FROM _ -> 23 
  | SELECT _ -> 24 
  | SET _ -> 25 
  | NEWLINE _ -> 26 
  | WHITESPACES _ -> 27 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_AT 
  | 4 -> TOKEN_LITERAL 
  | 5 -> TOKEN_EMBEDDED_VAR_COMMENT 
  | 6 -> TOKEN_BIND_VAR_COMMENT 
  | 7 -> TOKEN_FOR_COMMENT 
  | 8 -> TOKEN_END_COMMENT 
  | 9 -> TOKEN_ELSE_COMMENT 
  | 10 -> TOKEN_ELIF_COMMENT 
  | 11 -> TOKEN_IF_COMMENT 
  | 12 -> TOKEN_LINE_COMMENT 
  | 13 -> TOKEN_BLOCK_COMMENT 
  | 14 -> TOKEN_OTHER 
  | 15 -> TOKEN_WORD 
  | 16 -> TOKEN_OR 
  | 17 -> TOKEN_AND 
  | 18 -> TOKEN_FOR_UPDATE 
  | 19 -> TOKEN_ORDER_BY 
  | 20 -> TOKEN_GROUP_BY 
  | 21 -> TOKEN_HAVING 
  | 22 -> TOKEN_WHERE 
  | 23 -> TOKEN_FROM 
  | 24 -> TOKEN_SELECT 
  | 25 -> TOKEN_SET 
  | 26 -> TOKEN_NEWLINE 
  | 27 -> TOKEN_WHITESPACES 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Statement 
    | 4 -> NONTERM_Statement 
    | 5 -> NONTERM_NodeList 
    | 6 -> NONTERM_NodeList 
    | 7 -> NONTERM_NodeListOpt 
    | 8 -> NONTERM_NodeListOpt 
    | 9 -> NONTERM_Node 
    | 10 -> NONTERM_Node 
    | 11 -> NONTERM_Node 
    | 12 -> NONTERM_Node 
    | 13 -> NONTERM_Node 
    | 14 -> NONTERM_Node 
    | 15 -> NONTERM_Node 
    | 16 -> NONTERM_Node 
    | 17 -> NONTERM_Node 
    | 18 -> NONTERM_Node 
    | 19 -> NONTERM_Node 
    | 20 -> NONTERM_Node 
    | 21 -> NONTERM_Node 
    | 22 -> NONTERM_Node 
    | 23 -> NONTERM_Node 
    | 24 -> NONTERM_Node 
    | 25 -> NONTERM_Node 
    | 26 -> NONTERM_Node 
    | 27 -> NONTERM_Node 
    | 28 -> NONTERM_Node 
    | 29 -> NONTERM_Node 
    | 30 -> NONTERM_Node 
    | 31 -> NONTERM_Node 
    | 32 -> NONTERM_Node 
    | 33 -> NONTERM_Node 
    | 34 -> NONTERM_IfComment 
    | 35 -> NONTERM_ElifCommentList 
    | 36 -> NONTERM_ElifCommentList 
    | 37 -> NONTERM_ElifCommentListOpt 
    | 38 -> NONTERM_ElifCommentListOpt 
    | 39 -> NONTERM_ElifComment 
    | 40 -> NONTERM_ElseCommentOpt 
    | 41 -> NONTERM_ElseCommentOpt 
    | 42 -> NONTERM_ElseComment 
    | 43 -> NONTERM_ForComment 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | AT _ -> "AT" 
  | LITERAL _ -> "LITERAL" 
  | EMBEDDED_VAR_COMMENT _ -> "EMBEDDED_VAR_COMMENT" 
  | BIND_VAR_COMMENT _ -> "BIND_VAR_COMMENT" 
  | FOR_COMMENT _ -> "FOR_COMMENT" 
  | END_COMMENT _ -> "END_COMMENT" 
  | ELSE_COMMENT _ -> "ELSE_COMMENT" 
  | ELIF_COMMENT _ -> "ELIF_COMMENT" 
  | IF_COMMENT _ -> "IF_COMMENT" 
  | LINE_COMMENT _ -> "LINE_COMMENT" 
  | BLOCK_COMMENT _ -> "BLOCK_COMMENT" 
  | OTHER _ -> "OTHER" 
  | WORD _ -> "WORD" 
  | OR _ -> "OR" 
  | AND _ -> "AND" 
  | FOR_UPDATE _ -> "FOR_UPDATE" 
  | ORDER_BY _ -> "ORDER_BY" 
  | GROUP_BY _ -> "GROUP_BY" 
  | HAVING _ -> "HAVING" 
  | WHERE _ -> "WHERE" 
  | FROM _ -> "FROM" 
  | SELECT _ -> "SELECT" 
  | SET _ -> "SET" 
  | NEWLINE _ -> "NEWLINE" 
  | WHITESPACES _ -> "WHITESPACES" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | AT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EMBEDDED_VAR_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIND_VAR_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FOR_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | END_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELIF_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BLOCK_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OTHER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FOR_UPDATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ORDER_BY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GROUP_BY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HAVING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHERE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FROM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SELECT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEWLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITESPACES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 3us; 65535us; 0us; 3us; 8us; 6us; 30us; 7us; 18us; 65535us; 0us; 10us; 8us; 10us; 12us; 10us; 14us; 10us; 16us; 10us; 18us; 10us; 20us; 10us; 22us; 10us; 24us; 10us; 26us; 10us; 28us; 10us; 30us; 10us; 47us; 10us; 50us; 10us; 52us; 10us; 57us; 10us; 60us; 10us; 62us; 10us; 18us; 65535us; 0us; 5us; 8us; 5us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 5us; 47us; 48us; 50us; 51us; 52us; 53us; 57us; 58us; 60us; 61us; 62us; 63us; 20us; 65535us; 0us; 9us; 8us; 9us; 10us; 11us; 12us; 9us; 14us; 9us; 16us; 9us; 18us; 9us; 20us; 9us; 22us; 9us; 24us; 9us; 26us; 9us; 28us; 9us; 30us; 9us; 41us; 42us; 47us; 9us; 50us; 9us; 52us; 9us; 57us; 9us; 60us; 9us; 62us; 9us; 20us; 65535us; 0us; 44us; 8us; 44us; 10us; 44us; 12us; 44us; 14us; 44us; 16us; 44us; 18us; 44us; 20us; 44us; 22us; 44us; 24us; 44us; 26us; 44us; 28us; 44us; 30us; 44us; 41us; 44us; 47us; 44us; 50us; 44us; 52us; 44us; 57us; 44us; 60us; 44us; 62us; 44us; 1us; 65535us; 44us; 55us; 1us; 65535us; 44us; 45us; 2us; 65535us; 44us; 54us; 55us; 56us; 1us; 65535us; 45us; 46us; 1us; 65535us; 45us; 59us; 20us; 65535us; 0us; 49us; 8us; 49us; 10us; 49us; 12us; 49us; 14us; 49us; 16us; 49us; 18us; 49us; 20us; 49us; 22us; 49us; 24us; 49us; 26us; 49us; 28us; 49us; 30us; 49us; 41us; 49us; 47us; 49us; 50us; 49us; 52us; 49us; 57us; 49us; 60us; 49us; 62us; 49us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 9us; 28us; 47us; 68us; 89us; 91us; 93us; 96us; 98us; 100us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 4us; 1us; 2us; 1us; 3us; 2us; 4us; 4us; 2us; 4us; 18us; 1us; 4us; 1us; 5us; 2us; 6us; 8us; 1us; 6us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 26us; 2us; 27us; 28us; 1us; 27us; 1us; 29us; 2us; 30us; 31us; 2us; 30us; 31us; 2us; 30us; 31us; 1us; 30us; 1us; 30us; 2us; 32us; 33us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 34us; 1us; 35us; 2us; 36us; 38us; 1us; 36us; 1us; 39us; 1us; 39us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 16us; 19us; 21us; 23us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 89us; 91us; 93us; 96us; 99us; 102us; 104us; 106us; 109us; 111us; 113us; 115us; 117us; 119us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; |]
let _fsyacc_action_rows = 64
let _fsyacc_actionTableElements = [|22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 49152us; 0us; 16385us; 2us; 32768us; 0us; 4us; 25us; 8us; 0us; 16386us; 0us; 16387us; 1us; 16388us; 25us; 8us; 2us; 32768us; 2us; 31us; 25us; 8us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16389us; 22us; 16392us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16390us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16393us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16394us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16395us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16396us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16397us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16398us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16399us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16400us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16401us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 1us; 32768us; 15us; 40us; 0us; 16410us; 22us; 16412us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16411us; 0us; 16413us; 1us; 16421us; 10us; 57us; 1us; 16424us; 9us; 60us; 1us; 16415us; 8us; 47us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16414us; 1us; 16417us; 8us; 50us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16416us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16418us; 0us; 16419us; 1us; 16422us; 10us; 57us; 0us; 16420us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16423us; 0us; 16425us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16426us; 22us; 16391us; 1us; 30us; 3us; 39us; 4us; 34us; 5us; 43us; 6us; 41us; 7us; 62us; 11us; 52us; 12us; 38us; 13us; 37us; 14us; 36us; 15us; 35us; 16us; 28us; 17us; 26us; 18us; 24us; 19us; 22us; 20us; 20us; 21us; 18us; 22us; 16us; 23us; 14us; 24us; 12us; 26us; 33us; 27us; 32us; 0us; 16427us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 23us; 24us; 25us; 28us; 29us; 30us; 32us; 35us; 58us; 59us; 82us; 83us; 106us; 107us; 130us; 131us; 154us; 155us; 178us; 179us; 202us; 203us; 226us; 227us; 250us; 251us; 274us; 275us; 298us; 299us; 322us; 323us; 324us; 325us; 326us; 327us; 328us; 329us; 330us; 332us; 333us; 356us; 357us; 358us; 360us; 362us; 364us; 387us; 388us; 390us; 413us; 414us; 437us; 438us; 439us; 441us; 442us; 465us; 466us; 467us; 490us; 491us; 514us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 3us; 1us; 2us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 5us; 3us; 3us; 1us; 2us; 1us; 2us; 0us; 1us; 2us; 0us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 65535us; 16410us; 65535us; 16411us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 16416us; 65535us; 16418us; 16419us; 65535us; 16420us; 65535us; 16423us; 16425us; 65535us; 16426us; 65535us; 16427us; |]
let _fsyacc_reductions ()  =    [| 
# 284 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  SqlAst.Statement )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 293 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "SqlParser.fsy"
                                                           _1 
                   )
# 54 "SqlParser.fsy"
                 :  SqlAst.Statement ));
# 304 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "SqlParser.fsy"
                                                           _1 
                   )
# 57 "SqlParser.fsy"
                 : 'Prog));
# 315 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "SqlParser.fsy"
                                                           newStatement parseState _1 
                   )
# 60 "SqlParser.fsy"
                 : 'Statement));
# 326 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "SqlParser.fsy"
                                                           newSet parseState _1 _2 _3 
                   )
# 61 "SqlParser.fsy"
                 : 'Statement));
# 339 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "SqlParser.fsy"
                                                           [_1] 
                   )
# 64 "SqlParser.fsy"
                 : 'NodeList));
# 350 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "SqlParser.fsy"
                                                           _2 :: _1 
                   )
# 65 "SqlParser.fsy"
                 : 'NodeList));
# 362 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "SqlParser.fsy"
                                                           [] 
                   )
# 68 "SqlParser.fsy"
                 : 'NodeListOpt));
# 372 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "SqlParser.fsy"
                                                           _1 
                   )
# 69 "SqlParser.fsy"
                 : 'NodeListOpt));
# 383 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "SqlParser.fsy"
                                                           newSelect parseState _1 _2 
                   )
# 72 "SqlParser.fsy"
                 : 'Node));
# 395 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "SqlParser.fsy"
                                                           newFrom parseState _1 _2 
                   )
# 73 "SqlParser.fsy"
                 : 'Node));
# 407 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "SqlParser.fsy"
                                                           newWhere parseState _1 _2 
                   )
# 74 "SqlParser.fsy"
                 : 'Node));
# 419 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "SqlParser.fsy"
                                                           newHaving parseState _1 _2 
                   )
# 75 "SqlParser.fsy"
                 : 'Node));
# 431 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "SqlParser.fsy"
                                                           newGroupBy parseState _1 _2 
                   )
# 76 "SqlParser.fsy"
                 : 'Node));
# 443 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "SqlParser.fsy"
                                                           newOrderBy parseState _1 _2 
                   )
# 77 "SqlParser.fsy"
                 : 'Node));
# 455 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "SqlParser.fsy"
                                                           newForUpdate parseState _1 _2 
                   )
# 78 "SqlParser.fsy"
                 : 'Node));
# 467 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "SqlParser.fsy"
                                                           newAnd parseState _1 _2 
                   )
# 79 "SqlParser.fsy"
                 : 'Node));
# 479 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "SqlParser.fsy"
                                                           newOr parseState _1 _2 
                   )
# 80 "SqlParser.fsy"
                 : 'Node));
# 491 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "SqlParser.fsy"
                                                           newParens parseState _2 
                   )
# 81 "SqlParser.fsy"
                 : 'Node));
# 502 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "SqlParser.fsy"
                                                           newWhitespaces parseState _1 
                   )
# 82 "SqlParser.fsy"
                 : 'Node));
# 513 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "SqlParser.fsy"
                                                           newNewline parseState _1 
                   )
# 83 "SqlParser.fsy"
                 : 'Node));
# 524 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "SqlParser.fsy"
                                                           newLiteral parseState _1 
                   )
# 84 "SqlParser.fsy"
                 : 'Node));
# 535 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "SqlParser.fsy"
                                                           newWord parseState _1 
                   )
# 85 "SqlParser.fsy"
                 : 'Node));
# 546 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "SqlParser.fsy"
                                                           newOther parseState _1 
                   )
# 86 "SqlParser.fsy"
                 : 'Node));
# 557 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "SqlParser.fsy"
                                                           newBlockComment parseState _1
                   )
# 87 "SqlParser.fsy"
                 : 'Node));
# 568 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "SqlParser.fsy"
                                                           newLineComment parseState _1 
                   )
# 88 "SqlParser.fsy"
                 : 'Node));
# 579 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "SqlParser.fsy"
                                                           newBindVar parseState _1 _2 
                   )
# 89 "SqlParser.fsy"
                 : 'Node));
# 591 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "SqlParser.fsy"
                                                           newBindVarComment parseState _1 _2 
                   )
# 90 "SqlParser.fsy"
                 : 'Node));
# 603 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "SqlParser.fsy"
                                                           handleIncompleteBindVarComment parseState _1 
                   )
# 91 "SqlParser.fsy"
                 : 'Node));
# 614 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "SqlParser.fsy"
                                                           newEmbeddedVarComment parseState _1 
                   )
# 92 "SqlParser.fsy"
                 : 'Node));
# 625 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfComment)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifCommentListOpt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElseCommentOpt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "SqlParser.fsy"
                                                           newIfBlock parseState _1 _2 _3 _5 
                   )
# 94 "SqlParser.fsy"
                 : 'Node));
# 640 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfComment)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifCommentListOpt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElseCommentOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "SqlParser.fsy"
                                                           handleIncompleteIfBlock parseState 
                   )
# 96 "SqlParser.fsy"
                 : 'Node));
# 653 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ForComment)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "SqlParser.fsy"
                                                           newForBlock parseState _1 _3 
                   )
# 98 "SqlParser.fsy"
                 : 'Node));
# 666 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ForComment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "SqlParser.fsy"
                                                           handleIncompleteForBlock parseState 
                   )
# 100 "SqlParser.fsy"
                 : 'Node));
# 677 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "SqlParser.fsy"
                                                           newIfComment parseState _1 _2 
                   )
# 103 "SqlParser.fsy"
                 : 'IfComment));
# 689 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifComment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "SqlParser.fsy"
                                                           [_1] 
                   )
# 106 "SqlParser.fsy"
                 : 'ElifCommentList));
# 700 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifCommentList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifComment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "SqlParser.fsy"
                                                           _2 :: _1 
                   )
# 107 "SqlParser.fsy"
                 : 'ElifCommentList));
# 712 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "SqlParser.fsy"
                                                           [] 
                   )
# 110 "SqlParser.fsy"
                 : 'ElifCommentListOpt));
# 722 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElifCommentList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "SqlParser.fsy"
                                                           _1 
                   )
# 111 "SqlParser.fsy"
                 : 'ElifCommentListOpt));
# 733 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "SqlParser.fsy"
                                                           newElifComment parseState _1 _2 
                   )
# 114 "SqlParser.fsy"
                 : 'ElifComment));
# 745 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "SqlParser.fsy"
                                                           None 
                   )
# 117 "SqlParser.fsy"
                 : 'ElseCommentOpt));
# 755 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ElseComment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "SqlParser.fsy"
                                                           Some _1 
                   )
# 118 "SqlParser.fsy"
                 : 'ElseCommentOpt));
# 766 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "SqlParser.fsy"
                                                           newElseComment parseState _2 
                   )
# 121 "SqlParser.fsy"
                 : 'ElseComment));
# 778 "SqlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NodeListOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "SqlParser.fsy"
                                                           newForComment parseState _1 _2 
                   )
# 124 "SqlParser.fsy"
                 : 'ForComment));
|]
# 791 "SqlParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  SqlAst.Statement  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
