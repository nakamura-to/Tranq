// Signature file for parser generated by fsyacc
module internal Tranq.SqlParser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | AT of (string)
  | LITERAL of (string)
  | EMBEDDED_VAR_COMMENT of (string)
  | BIND_VAR_COMMENT of (string)
  | FOR_COMMENT of (string)
  | END_COMMENT of (string)
  | ELSE_COMMENT of (string)
  | ELIF_COMMENT of (string)
  | IF_COMMENT of (string)
  | LINE_COMMENT of (string)
  | BLOCK_COMMENT of (string)
  | OTHER of (string)
  | WORD of (string)
  | OR of (string)
  | AND of (string)
  | FOR_UPDATE of (string)
  | ORDER_BY of (string)
  | GROUP_BY of (string)
  | HAVING of (string)
  | WHERE of (string)
  | FROM of (string)
  | SELECT of (string)
  | SET of (string)
  | NEWLINE of (string)
  | WHITESPACES of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_AT
    | TOKEN_LITERAL
    | TOKEN_EMBEDDED_VAR_COMMENT
    | TOKEN_BIND_VAR_COMMENT
    | TOKEN_FOR_COMMENT
    | TOKEN_END_COMMENT
    | TOKEN_ELSE_COMMENT
    | TOKEN_ELIF_COMMENT
    | TOKEN_IF_COMMENT
    | TOKEN_LINE_COMMENT
    | TOKEN_BLOCK_COMMENT
    | TOKEN_OTHER
    | TOKEN_WORD
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_FOR_UPDATE
    | TOKEN_ORDER_BY
    | TOKEN_GROUP_BY
    | TOKEN_HAVING
    | TOKEN_WHERE
    | TOKEN_FROM
    | TOKEN_SELECT
    | TOKEN_SET
    | TOKEN_NEWLINE
    | TOKEN_WHITESPACES
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Statement
    | NONTERM_NodeList
    | NONTERM_NodeListOpt
    | NONTERM_Node
    | NONTERM_IfComment
    | NONTERM_ElifCommentList
    | NONTERM_ElifCommentListOpt
    | NONTERM_ElifComment
    | NONTERM_ElseCommentOpt
    | NONTERM_ElseComment
    | NONTERM_ForComment
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( SqlAst.Statement ) 
